/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on 2009-8-29, 16:22:29
 */
package biodraft;

import java.awt.Cursor;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Administrator
 */
public class MainFrame extends javax.swing.JFrame implements FrameSetable {

    Controller controller = null;

    public MainFrame() {
        try {
            initComponents();
            controller = Controller.getInstance();
            ArrayList<PrimerPair> primerList = new ArrayList<PrimerPair>();
            primerTable.setModel(controller.pupolatePrimerTableModel(primerList));
            controller.modifyTableHeader(primerTable);
            resultTable.setModel(new MyTableModel(controller.getResultTableNames()));
            setAllSpinners();
            ButtonGroup buttongroup = new ButtonGroup();
            buttongroup.add(tRadioButton);
            buttongroup.add(sRadioButton);
            intensityText = new JFormattedTextField(new java.text.DecimalFormat("##.0"));
            toleranceText = new JFormattedTextField(new java.text.DecimalFormat("##.0"));
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newDataGroupFileChooser = new javax.swing.JFileChooser();
        newGroupNameOptionPane = new javax.swing.JOptionPane();
        expDataFileChooser = new javax.swing.JFileChooser();
        frameSplitPane = new javax.swing.JSplitPane();
        topSplitPane = new javax.swing.JSplitPane();
        treeScrollPane = new javax.swing.JScrollPane();
        seqTree = new javax.swing.JTree();
        topRightPanel = new javax.swing.JPanel();
        thresPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        pThreSpinner = new javax.swing.JSpinner();
        fThreSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        minSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        maxSpinner = new javax.swing.JSpinner();
        editTogButton = new javax.swing.JToggleButton();
        resetButton = new javax.swing.JButton();
        priemrPanel = new javax.swing.JPanel();
        primerScrollPane = new javax.swing.JScrollPane();
        primerTable = new javax.swing.JTable();
        bottomPanel = new javax.swing.JPanel();
        selectPrimerPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        forStartSpinner = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        forEndSpinner = new javax.swing.JSpinner();
        customizedCheckBox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        forPrimerText = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        revStartSpinner = new javax.swing.JSpinner();
        revEndSpinner = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        revPrimerText = new javax.swing.JTextArea();
        typingPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        pathText = new javax.swing.JFormattedTextField();
        fileButton = new javax.swing.JButton();
        typeButton = new javax.swing.JButton();
        resultScrollPane = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        tRadioButton = new javax.swing.JRadioButton();
        sRadioButton = new javax.swing.JRadioButton();
        jLabel16 = new javax.swing.JLabel();
        intensityText = new javax.swing.JFormattedTextField();
        toleranceText = new javax.swing.JFormattedTextField();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newDataGroupMenuItem = new javax.swing.JMenuItem();
        openDataGroupMenuItem = new javax.swing.JMenuItem();
        deleteDataGroupMenuItem = new javax.swing.JMenuItem();
        newDataBaseMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        frameSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        treeScrollPane.setMinimumSize(new java.awt.Dimension(35, 35));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        seqTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        seqTree.setRootVisible(false);
        treeScrollPane.setViewportView(seqTree);

        topSplitPane.setLeftComponent(treeScrollPane);

        thresPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Primer Selection Threshold"));

        jLabel1.setText("Min-length of Primer");

        jLabel2.setText("Min-Length of Fragment");

        pThreSpinner.setModel(new javax.swing.SpinnerNumberModel());
        pThreSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(pThreSpinner, ""));
        pThreSpinner.setEnabled(false);

        fThreSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        fThreSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(fThreSpinner, ""));
        fThreSpinner.setEnabled(false);

        jLabel3.setText("Length Between Primers  Min");

        minSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        minSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(minSpinner, ""));
        minSpinner.setEnabled(false);

        jLabel4.setText("Max");

        maxSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        maxSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(maxSpinner, ""));
        maxSpinner.setEnabled(false);

        editTogButton.setText("Edit");
        editTogButton.setEnabled(false);
        editTogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTogButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout thresPanelLayout = new javax.swing.GroupLayout(thresPanel);
        thresPanel.setLayout(thresPanelLayout);
        thresPanelLayout.setHorizontalGroup(
            thresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(thresPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(thresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(thresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(fThreSpinner)
                    .addComponent(pThreSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                .addGroup(thresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, thresPanelLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(minSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(thresPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editTogButton)))
                .addContainerGap(208, Short.MAX_VALUE))
        );
        thresPanelLayout.setVerticalGroup(
            thresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(thresPanelLayout.createSequentialGroup()
                .addGroup(thresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(pThreSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(minSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(maxSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(thresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(thresPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(thresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fThreSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addContainerGap(20, Short.MAX_VALUE))
                    .addGroup(thresPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(thresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editTogButton)
                            .addComponent(resetButton))
                        .addContainerGap())))
        );

        priemrPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Primer"));

        primerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7"
            }
        ));
        primerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                primerTableMouseClicked(evt);
            }
        });
        primerScrollPane.setViewportView(primerTable);

        javax.swing.GroupLayout priemrPanelLayout = new javax.swing.GroupLayout(priemrPanel);
        priemrPanel.setLayout(priemrPanelLayout);
        priemrPanelLayout.setHorizontalGroup(
            priemrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 737, Short.MAX_VALUE)
            .addGroup(priemrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(primerScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 737, Short.MAX_VALUE))
        );
        priemrPanelLayout.setVerticalGroup(
            priemrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 119, Short.MAX_VALUE)
            .addGroup(priemrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(priemrPanelLayout.createSequentialGroup()
                    .addComponent(primerScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout topRightPanelLayout = new javax.swing.GroupLayout(topRightPanel);
        topRightPanel.setLayout(topRightPanelLayout);
        topRightPanelLayout.setHorizontalGroup(
            topRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, topRightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(topRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(priemrPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(thresPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        topRightPanelLayout.setVerticalGroup(
            topRightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topRightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(thresPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(priemrPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        topSplitPane.setRightComponent(topRightPanel);

        frameSplitPane.setLeftComponent(topSplitPane);

        selectPrimerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected Primer"));

        jLabel5.setText("Forward Primer:");

        jLabel6.setText("Start:");

        forStartSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(forStartSpinner, ""));
        forStartSpinner.setEnabled(false);
        forStartSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                forStartSpinnerStateChanged(evt);
            }
        });

        jLabel7.setText("End:");

        forEndSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(forEndSpinner, ""));
        forEndSpinner.setEnabled(false);
        forEndSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                forStartSpinnerStateChanged(evt);
            }
        });

        customizedCheckBox.setText("Use Customized Primer");
        customizedCheckBox.setEnabled(false);
        customizedCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                customizedCheckBoxItemStateChanged(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        forPrimerText.setColumns(20);
        forPrimerText.setLineWrap(true);
        forPrimerText.setRows(5);
        forPrimerText.setEnabled(false);
        jScrollPane1.setViewportView(forPrimerText);

        jLabel8.setText("Reverse Primer:");

        jLabel9.setText("Start:");

        revStartSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(revStartSpinner, ""));
        revStartSpinner.setEnabled(false);
        revStartSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                revStartSpinnerStateChanged(evt);
            }
        });

        revEndSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(revEndSpinner, ""));
        revEndSpinner.setEnabled(false);

        jLabel10.setText("End:");

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        revPrimerText.setColumns(20);
        revPrimerText.setLineWrap(true);
        revPrimerText.setRows(5);
        revPrimerText.setEnabled(false);
        jScrollPane2.setViewportView(revPrimerText);

        javax.swing.GroupLayout selectPrimerPanelLayout = new javax.swing.GroupLayout(selectPrimerPanel);
        selectPrimerPanel.setLayout(selectPrimerPanelLayout);
        selectPrimerPanelLayout.setHorizontalGroup(
            selectPrimerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectPrimerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(selectPrimerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                    .addComponent(customizedCheckBox)
                    .addComponent(jLabel5)
                    .addGroup(selectPrimerPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(selectPrimerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(selectPrimerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(forEndSpinner)
                            .addComponent(forStartSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                    .addComponent(jLabel8)
                    .addGroup(selectPrimerPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(selectPrimerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(selectPrimerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(revEndSpinner)
                            .addComponent(revStartSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        selectPrimerPanelLayout.setVerticalGroup(
            selectPrimerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectPrimerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(customizedCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(selectPrimerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(forStartSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(selectPrimerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(forEndSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(selectPrimerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(revStartSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(selectPrimerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(revEndSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        typingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Typing"));

        jLabel11.setText("Import Mass-Spectrometry Data:");

        pathText.setText("C://");

        fileButton.setText("Open File");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        typeButton.setText("Start Typing");
        typeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeButtonActionPerformed(evt);
            }
        });

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        resultScrollPane.setViewportView(resultTable);

        jLabel12.setText("Intensity Threshold");

        jLabel13.setText("PCR Enzyme");

        jLabel14.setText("Mass Tolerance");

        jLabel15.setText("Da");

        tRadioButton.setText("T7");

        sRadioButton.setText("Sp6");

        jLabel16.setText("%");

        javax.swing.GroupLayout typingPanelLayout = new javax.swing.GroupLayout(typingPanel);
        typingPanel.setLayout(typingPanelLayout);
        typingPanelLayout.setHorizontalGroup(
            typingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(typingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(typingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
                    .addComponent(typeButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(typingPanelLayout.createSequentialGroup()
                        .addGroup(typingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(typingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(typingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, typingPanelLayout.createSequentialGroup()
                                    .addGroup(typingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(intensityText, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tRadioButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(typingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(sRadioButton)))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, typingPanelLayout.createSequentialGroup()
                                    .addComponent(toleranceText, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel15)))
                            .addComponent(pathText, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileButton)))
                .addContainerGap())
        );
        typingPanelLayout.setVerticalGroup(
            typingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(typingPanelLayout.createSequentialGroup()
                .addGroup(typingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(typingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(pathText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(fileButton))
                .addGap(16, 16, 16)
                .addGroup(typingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel16)
                    .addComponent(intensityText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(typingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(tRadioButton)
                    .addComponent(sRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(typingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(toleranceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(10, 10, 10)
                .addComponent(typeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout bottomPanelLayout = new javax.swing.GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectPrimerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(typingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        bottomPanelLayout.setVerticalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(typingPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                    .addComponent(selectPrimerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        frameSplitPane.setRightComponent(bottomPanel);

        fileMenu.setText("File");

        newDataGroupMenuItem.setText("New Data Group");
        newDataGroupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDataGroupMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newDataGroupMenuItem);

        openDataGroupMenuItem.setText("Open Data Group");
        openDataGroupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDataGroupMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openDataGroupMenuItem);

        deleteDataGroupMenuItem.setText("Delete Data Group");
        deleteDataGroupMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDataGroupMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(deleteDataGroupMenuItem);

        newDataBaseMenuItem.setText("Import New Database");
        fileMenu.add(newDataBaseMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText("Help");

        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(frameSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(frameSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newDataGroupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDataGroupMenuItemActionPerformed
        // TODO add your handling code here:
        try {
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Fasta files", "fasta");
            newDataGroupFileChooser.setFileFilter(filter);
            int returnVal = newDataGroupFileChooser.showOpenDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = newDataGroupFileChooser.getSelectedFile();
                String groupName = "";
                String temp = null;
                while (groupName.equals("")) {
                    temp = JOptionPane.showInputDialog("Please input the data group name");
                    if (temp == null) {
                        return;
                    } else {
                        groupName = temp;
                    }
                }

//                InfoFrame infoFrame = new InfoFrame();
//                infoFrame.setVisible(true);
//
//                InfoDialog infoDialog = new InfoDialog(this, false);
//                infoDialog.setVisible(true);

                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//                infoDialog.wait();
//                Runnable waitDialog =
//                java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//               seqTree.setModel(controller.createNewDataGroup(file, groupName));
//                editTogButton.setEnabled(true);
//                customizedCheckBox.setEnabled(true);
//            }
//        });
                seqTree.setModel(controller.createNewDataGroup(file, groupName));
                editTogButton.setEnabled(true);
                customizedCheckBox.setEnabled(true);
                this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
//                waitDialog.close();
//                infoD.dispose();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "File Not Exist!",
                    "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Oops, we have an IO problem. Retry",
                    "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            JOptionPane.showMessageDialog(null, "Oops, Subprocess Failed. Retry",
                    "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_newDataGroupMenuItemActionPerformed

    private void editTogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTogButtonActionPerformed
        // TODO add your handling code here:
        if (editTogButton.getText().equals("Edit")) {
            editTogButton.setText("Finish");
            setThresholdEnabled(true);
        } else {
            try {
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                editTogButton.setText("Edit");
                setThresholdEnabled(false);
                //check the thresholds and search for primer
                int lpth = Integer.parseInt(pThreSpinner.getValue().toString());
                int lfth = Integer.parseInt(fThreSpinner.getValue().toString());
                int lvth = Integer.parseInt(minSpinner.getValue().toString());
                int hvth = Integer.parseInt(maxSpinner.getValue().toString());
                if (lpth == 0 || lfth == 0 || lvth == 0 || hvth == 0) {
                    throw new Exception("Threshod Value must greater than 0");
                }

                if (lvth >= hvth) {
                    throw new Exception("Primer Max-Length must be greater then Min-Length");
                }

                DataGroup.setThesholdByID(lpth, lfth, lvth, hvth, controller.getGroupID());
                String starSeq = DataGroup.getStarSeqByGroupID(controller.getGroupID());
                ArrayList<String> seqs = GeneSeq.getSeqsByGroupID(controller.getGroupID());
                MSTT mstt = new MSTT(starSeq, seqs, lpth, lvth, hvth, lfth, controller.getGroupID());
                ArrayList<PrimerPair> primerPairs = mstt.run();
                for (PrimerPair p : primerPairs) {
                    PrimerPair.AddPrimerPair(p);
                }

                primerTable.setModel(controller.pupolatePrimerTableModel(primerPairs));
                this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            } catch (SQLException ex) {
                ex.printStackTrace();
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
//                e.printStackTrace();
            }

        }
    }//GEN-LAST:event_editTogButtonActionPerformed

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        // TODO add your handling code here:
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text files", "txt");
        expDataFileChooser.setFileFilter(filter);
        int returnVal = expDataFileChooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            pathText.setText(expDataFileChooser.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_fileButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        if (controller.getGroupID() == -1) {
            resetThreshold();
        } else {
            resetThreshold(controller.getGroupID());
        }
    }//GEN-LAST:event_resetButtonActionPerformed

    /*
    private void removeAllChangeListener(JSpinner js) {
    ChangeListener[] cls = js.getChangeListeners();
    for (int i = 0; i < cls.length; i++) {
    js.removeChangeListener(cls[i]);
    }
    }
     */
    private void primerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_primerTableMouseClicked
        // TODO add your handling code here:
//        forStartSpinner.removeChangeListener(forStartSpinner.getChangeListeners()[0]);
//        forEndSpinner.removeChangeListener(forEndSpinner.getChangeListeners()[0]);
//        revStartSpinner.removeChangeListener(revStartSpinner.getChangeListeners()[0]);
//        revEndSpinner.removeChangeListener(revEndSpinner.getChangeListeners()[0]);
//        removeAllChangeListener(forStartSpinner);
//        removeAllChangeListener(forEndSpinner);
//        removeAllChangeListener(revStartSpinner);
//        removeAllChangeListener(revEndSpinner);
//        for(int i = 0; i < forStartSpinner.getChangeListeners().length; i++) {
//            forStartSpinner.removeChangeListener(null);
//        }

        int row;
        if ((row = primerTable.getSelectedRow()) != -1) {
            try {
                int forStart = Integer.parseInt(primerTable.getValueAt(row, 0).toString());
                int forEnd = Integer.parseInt(primerTable.getValueAt(row, 1).toString());
                int revStart = Integer.parseInt(primerTable.getValueAt(row, 3).toString());
                int revEnd = Integer.parseInt(primerTable.getValueAt(row, 4).toString());
//            int groupID = Integer.parseInt(primerTable.getValueAt(row, 4).toString());
                forStartSpinner.setValue(forStart);
                forEndSpinner.setValue(forEnd);
                revStartSpinner.setValue(revStart);
                revEndSpinner.setValue(revEnd);
                forStartSpinner.setModel(new SpinnerNumberModel(forStart, forStart, forEnd, 1));
                forEndSpinner.setModel(new SpinnerNumberModel(forEnd, forStart, forEnd, 1));
                revStartSpinner.setModel(new SpinnerNumberModel(revStart, revStart, revEnd, 1));
                revEndSpinner.setModel(new SpinnerNumberModel(revEnd, revStart, revEnd, 1));
                forPrimerText.setText(controller.getPrimerSeq(forStart, forEnd, controller.getGroupID()));
                revPrimerText.setText(controller.getPrimerSeq(revStart, revEnd, controller.getGroupID()));
            } catch (SQLException ex) {
                ex.printStackTrace();
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_primerTableMouseClicked

    private void openDataGroupMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDataGroupMenuItemActionPerformed
        try {
            // TODO add your handling code here:
            GroupDialog group = new GroupDialog(this, true, this, controller);
            group.setTableModel(controller.populateGroupTableModel(group));
            group.setVisible(true);
        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openDataGroupMenuItemActionPerformed

    private void typeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeButtonActionPerformed
        // TODO add your handling code here:
        if (checkPrimer()) {
            if ((tRadioButton.isSelected()) || sRadioButton.isSelected()) {
                try {
                    int groupid = DataGroup.getGroupIDByName(seqTree.getModel().getRoot().toString());
                    int filter = DataGroup.getGroupByID(groupid).getLowFilterLength();
                    PrimerPair primerpair = new PrimerPair(Integer.parseInt(
                            forStartSpinner.getValue().toString()), Integer.parseInt(
                            forEndSpinner.getValue().toString()), Integer.parseInt(
                            revStartSpinner.getValue().toString()), Integer.parseInt(
                            revEndSpinner.getValue().toString()), 0, groupid);
                    ArrayList<GeneSeq> genesList = GeneSeq.getGenesByGroupID(groupid);
                    ArrayList<Double> expData;
                    if (intensityText.getText() != "") {
                        expData = controller.getExpMassList(new File(pathText.getText()), Double.parseDouble(intensityText.getText()));
                    } else {
                        expData = controller.getExpMassList(new File(pathText.getText()), 0);
                    }
                    Enzyme enzyme;
                    if (tRadioButton.isSelected()) {
                        enzyme = Enzyme.T7;
                    } else {
                        enzyme = Enzyme.SP6;
                    }
                    Object[][] data;
                    if (toleranceText.getText() != "") {
                        data = controller.typing(genesList, expData, primerpair, filter, enzyme, Double.parseDouble(toleranceText.getText()));
                    } else {
                        data = controller.typing(genesList, expData, primerpair, filter, enzyme, 0);
                    }
                    String[] columnNames = {"Gene Name", "Coincidence"};
                    resultTable.setModel(new MyTableModel(columnNames, data));
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (FileNotFoundException ex) {
                    JOptionPane.showMessageDialog(null, "File Not Exist", "Error",
                            JOptionPane.ERROR_MESSAGE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Oops, we have an IO problem. Retry",
                            "Error", JOptionPane.ERROR_MESSAGE);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage(),
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please give your enzyme",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Invalid Primer");
        }
    }//GEN-LAST:event_typeButtonActionPerformed

    private void customizedCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_customizedCheckBoxItemStateChanged
        // TODO add your handling code here:
        if (customizedCheckBox.isSelected()) {
            setPrimerEnabled(true);
        } else {
            setPrimerEnabled(false);
        }
    }//GEN-LAST:event_customizedCheckBoxItemStateChanged

    private void forStartSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_forStartSpinnerStateChanged
//        try {
//            // TODO add your handling code here:
////        int increment = Integer.parseInt(forStartSpinner.getValue().toString())-
////                Integer.parseInt(((SpinnerNumberModel)forStartSpinner.getModel()).getMinimum().toString());
////        forPrimerText.setText(forPrimerText.getText().substring(increment+1));
//            int forStart = Integer.parseInt(forStartSpinner.getValue().toString());
//            int forEnd = Integer.parseInt(forEndSpinner.getValue().toString());
//            forPrimerText.setText(controller.getPrimerSeq(forStart, forEnd, controller.getGroupID()));
//        } catch (SQLException ex) {
//            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_forStartSpinnerStateChanged

    private void revStartSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_revStartSpinnerStateChanged
//        try {
//            // TODO add your handling code here:
//            int revStart = Integer.parseInt(revStartSpinner.getValue().toString());
//            int revEnd = Integer.parseInt(revEndSpinner.getValue().toString());
//            revPrimerText.setText(controller.getPrimerSeq(revStart, revEnd, controller.getGroupID()));
//        } catch (SQLException ex) {
//            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_revStartSpinnerStateChanged

    public void refreshFrame(String name) {
        DefaultMutableTreeNode root =
                (DefaultMutableTreeNode) seqTree.getModel().getRoot();
        String rootName = root.toString();
        if (!name.equals(rootName)) {
            try {
                controller.setGroupID(DataGroup.getGroupIDByName(name));
                seqTree.setModel(controller.populateTreeModel(DataGroup.getGroupIDByName(name)));
                editTogButton.setEnabled(true);
                editTogButton.setText("Edit");
                customizedCheckBox.setEnabled(true);
                customizedCheckBox.setSelected(false);
                setPrimerEnabled(false);
                setThresholdEnabled(false);
                resetThreshold(controller.getGroupID());
                resetPrimer();

                ArrayList<PrimerPair> primerList = PrimerPair.getPrimerPairsByGroupID(DataGroup.getGroupIDByName(name));
                primerTable.setModel(controller.pupolatePrimerTableModel(primerList));
                controller.modifyTableHeader(primerTable);
            } catch (SQLException ex) {
                ex.printStackTrace();
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    public void resetFrame(String name) {
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) seqTree.getModel().getRoot();
        String rootName = root.toString();
        if (name.equals(rootName)) {
            controller.setGroupID(-1);
            root =
                    new DefaultMutableTreeNode();
            seqTree.setModel(new DefaultTreeModel(root));
            seqTree.setRootVisible(false);
            primerTable.setModel(new MyTableModel(controller.getPrimerTableNames()));
            controller.modifyTableHeader(primerTable);
            editTogButton.setEnabled(false);
            editTogButton.setText("Edit");
            customizedCheckBox.setEnabled(false);
            customizedCheckBox.setSelected(false);
            setPrimerEnabled(false);
            setThresholdEnabled(false);
            resetThreshold();

            resetPrimer();

        }






    }

    public void setThresholdEnabled(boolean flag) {
        pThreSpinner.setEnabled(flag);
        fThreSpinner.setEnabled(flag);
        maxSpinner.setEnabled(flag);
        minSpinner.setEnabled(flag);
    }

    public void resetThreshold(int groupID) {
        try {
            DataGroup datagroup = DataGroup.getGroupByID(groupID);
            pThreSpinner.setValue(datagroup.getLowPrimerLength());
            fThreSpinner.setValue(datagroup.getLowFilterLength());
            maxSpinner.setValue(datagroup.getHighVariableRegionLength());
            minSpinner.setValue(datagroup.getLowVariableRegionLength());
        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void resetThreshold() {
        pThreSpinner.setValue(0);
        fThreSpinner.setValue(0);
        maxSpinner.setValue(0);
        minSpinner.setValue(0);
    }

    public void setPrimerEnabled(boolean flag) {
        forStartSpinner.setEnabled(flag);
        forEndSpinner.setEnabled(flag);
        revStartSpinner.setEnabled(flag);
        revEndSpinner.setEnabled(flag);
    }

    public void resetPrimer() {
        forStartSpinner.setValue(0);
        forEndSpinner.setValue(0);
        revStartSpinner.setValue(0);
        revEndSpinner.setValue(0);
    }

    private boolean checkPrimer() {
        boolean flag = true;
        if (Integer.parseInt(forStartSpinner.getValue().toString()) >= Integer.parseInt(forEndSpinner.getValue().toString()) ||
                Integer.parseInt(revStartSpinner.getValue().toString()) >= Integer.parseInt(revEndSpinner.getValue().toString())) {
            flag = false;
        } else if (Integer.parseInt(forEndSpinner.getValue().toString()) == 0 ||
                Integer.parseInt(revStartSpinner.getValue().toString()) == 0 ||
                Integer.parseInt(revEndSpinner.getValue().toString()) == 0) {
            flag = false;
        } else if (Integer.parseInt(forEndSpinner.getValue().toString()) >= Integer.parseInt(revStartSpinner.getValue().toString())) {
            flag = false;
        }

        return flag;
    }

    private void setSpinner(JSpinner spinner, int deValue, int min, int max) {
        spinner.setModel(new SpinnerNumberModel(deValue, min, max, 1));
        JSpinner.NumberEditor editor = new JSpinner.NumberEditor(spinner, "0");
        spinner.setEditor(editor);
        JFormattedTextField textField = ((JSpinner.NumberEditor) spinner.getEditor()).getTextField();
        textField.setEditable(true);
        DefaultFormatterFactory factory = (DefaultFormatterFactory) textField.getFormatterFactory();
        NumberFormatter formatter = (NumberFormatter) factory.getDefaultFormatter();
        formatter.setAllowsInvalid(false);
    }

    private void setAllSpinners() {
        setSpinner(pThreSpinner, 0, 0, Integer.MAX_VALUE);
        setSpinner(fThreSpinner, 0, 0, Integer.MAX_VALUE);
        setSpinner(minSpinner, 0, 0, Integer.MAX_VALUE);
        setSpinner(maxSpinner, 0, 0, Integer.MAX_VALUE);
        setSpinner(forStartSpinner, 0, 0, Integer.MAX_VALUE);
        setSpinner(forEndSpinner, 0, 0, Integer.MAX_VALUE);
        setSpinner(revStartSpinner, 0, 0, Integer.MAX_VALUE);
        setSpinner(revEndSpinner, 0, 0, Integer.MAX_VALUE);

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JCheckBox customizedCheckBox;
    private javax.swing.JMenuItem deleteDataGroupMenuItem;
    private javax.swing.JToggleButton editTogButton;
    private javax.swing.JFileChooser expDataFileChooser;
    private javax.swing.JSpinner fThreSpinner;
    private javax.swing.JButton fileButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JSpinner forEndSpinner;
    private javax.swing.JTextArea forPrimerText;
    private javax.swing.JSpinner forStartSpinner;
    private javax.swing.JSplitPane frameSplitPane;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JFormattedTextField intensityText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner maxSpinner;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JSpinner minSpinner;
    private javax.swing.JMenuItem newDataBaseMenuItem;
    private javax.swing.JFileChooser newDataGroupFileChooser;
    private javax.swing.JMenuItem newDataGroupMenuItem;
    private javax.swing.JOptionPane newGroupNameOptionPane;
    private javax.swing.JMenuItem openDataGroupMenuItem;
    private javax.swing.JSpinner pThreSpinner;
    private javax.swing.JFormattedTextField pathText;
    private javax.swing.JPanel priemrPanel;
    private javax.swing.JScrollPane primerScrollPane;
    private javax.swing.JTable primerTable;
    private javax.swing.JButton resetButton;
    private javax.swing.JScrollPane resultScrollPane;
    private javax.swing.JTable resultTable;
    private javax.swing.JSpinner revEndSpinner;
    private javax.swing.JTextArea revPrimerText;
    private javax.swing.JSpinner revStartSpinner;
    private javax.swing.JRadioButton sRadioButton;
    private javax.swing.JPanel selectPrimerPanel;
    private javax.swing.JTree seqTree;
    private javax.swing.JRadioButton tRadioButton;
    private javax.swing.JPanel thresPanel;
    private javax.swing.JFormattedTextField toleranceText;
    private javax.swing.JPanel topRightPanel;
    private javax.swing.JSplitPane topSplitPane;
    private javax.swing.JScrollPane treeScrollPane;
    private javax.swing.JButton typeButton;
    private javax.swing.JPanel typingPanel;
    // End of variables declaration//GEN-END:variables
}
